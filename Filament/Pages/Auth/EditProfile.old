<?php

namespace Modules\User\Filament\Pages\Auth;


use Filament\Forms\Form;
use Filament\Pages\Page;
use Filament\Forms\Components\Grid;
use Illuminate\Support\Facades\Hash;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Textarea;
use Illuminate\Support\Facades\Storage;
use Modules\Xot\Contracts\UserContract;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\FileUpload;
use Illuminate\Validation\Rules\Password;
use Filament\Pages\Auth\EditProfile as BaseEditProfile;

class EditProfile extends BaseEditProfile
{
    protected static ?string $navigationIcon = 'heroicon-o-user';
    //protected static string $view = 'user::filament.pages.auth.edit-profile';
    protected static ?string $title = 'Edit Profile';
    
    public ?array $data = [];
    public UserContract $user;

    public function mount(): void
    {
        $this->user = auth()->user();
        $this->form->fill($this->user->toArray());
    }

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Grid::make(3)
                    ->schema([
                        Section::make('Basic Information')
                            ->columnSpan(4)
                            ->schema([
                                Grid::make(2)
                                    ->schema([
                                        TextInput::make('name')
                                            ->required(),
                                        TextInput::make('email')
                                            ->email()
                                            ->required()
                                            ->unique(table: User::class, ignorable: $this->user),
                                        TextInput::make('username')
                                            ->required()
                                            ->unique(table: User::class, ignorable: $this->user),
                                        TextInput::make('phone')
                                            ->tel(),
                                        DatePicker::make('birth_date')
                                            ->format('Y-m-d'),
                                        Select::make('gender')
                                            ->options([
                                                'male' => 'Male',
                                                'female' => 'Female',
                                                'other' => 'Other',
                                            ]),
                                    ]),
                            ]),
                        
                        Section::make('Profile Picture')
                            ->columnSpan(1)
                            ->schema([
                                FileUpload::make('avatar')
                                    ->image()
                                    ->disk('public')
                                    ->directory('avatars')
                                    ->visibility('public')
                                    ->imagePreviewHeight('250')
                                    ->loadingIndicatorPosition('left')
                                    ->panelAspectRatio('2:2')
                                    ->panelLayout('integrated')
                                    ->removeUploadedFileButtonPosition('right')
                                    ->uploadButtonPosition('left')
                                    ->uploadProgressIndicatorPosition('left'),
                            ]),
                    ]),

                Section::make('Additional Information')
                    ->schema([
                        Grid::make(2)
                            ->schema([
                                Textarea::make('bio')
                                    ->rows(3),
                                TextInput::make('location'),
                                TextInput::make('website')
                                    ->url(),
                                TextInput::make('company'),
                            ]),
                    ]),

                Section::make('Social Media')
                    ->schema([
                        Grid::make(3)
                            ->schema([
                                TextInput::make('linkedin_url')
                                    ->url()
                                    ->prefix('https://linkedin.com/'),
                                TextInput::make('twitter_url')
                                    ->url()
                                    ->prefix('https://twitter.com/'),
                                TextInput::make('github_url')
                                    ->url()
                                    ->prefix('https://github.com/'),
                            ]),
                    ]),

                Section::make('Security')
                    ->schema([
                        Grid::make(2)
                            ->schema([
                                TextInput::make('current_password')
                                    ->password()
                                    ->label('Current Password')
                                    ->dehydrated(false),
                                TextInput::make('new_password')
                                    ->password()
                                    ->label('New Password')
                                    ->rule(Password::default())
                                    ->dehydrated(false),
                                Toggle::make('two_factor_enabled')
                                    ->label('Enable Two Factor Authentication'),
                            ]),
                    ]),
            ])
            
            ->statePath('data');
    }

    public function save(): void
    {
        $data = $this->form->getState();

        if (isset($data['current_password'])) {
            if (! Hash::check($data['current_password'], $this->user->password)) {
                Notification::make()
                    ->title('Invalid current password')
                    ->danger()
                    ->send();

                return;
            }

            if ($data['new_password']) {
                $data['password'] = Hash::make($data['new_password']);
            }
        }

        unset($data['current_password'], $data['new_password']);

        if (isset($data['avatar']) && $this->user->avatar) {
            Storage::disk('public')->delete($this->user->avatar);
        }

        $this->user->update($data);

        if (isset($data['two_factor_enabled'])) {
            $this->user->forceFill([
                'two_factor_enabled' => $data['two_factor_enabled'],
            ])->save();
        }

        Notification::make()
            ->title('Profile updated successfully')
            ->success()
            ->send();
    }
}
