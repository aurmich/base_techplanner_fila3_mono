<?php
/**
 * @see https://github.com/ryangjchandler/filament-navigation
 * ---
 */

declare(strict_types=1);

namespace Modules\UI\Filament\Resources\TreeResource\Pages\Concerns;

use Filament\Actions\Action;
use Filament\Forms\ComponentContainer;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Modules\Camping\Actions\Asset\GetNewInventoryNumberAction;
use Webmozart\Assert\Assert;

/**
 * @property array $data
 */
trait HandlesTreeBuilder
{
    public ?string $mountedItem = null;

    public array $mountedItemData = [];

    public array $mountedActionData = []; // added by Xot
    // protected array $mountedActionsData = []; // added by Xot

    public ?string $mountedChildTarget = null;

    public function sortNavigation(string $targetStatePath, array $targetItemsStatePaths): void
    {
        $items = [];

        foreach ($targetItemsStatePaths as $targetItemStatePath) {
            Assert::isArray($item = data_get($this, $targetItemStatePath));
            $uuid = Str::afterLast($targetItemStatePath, '.');

            $items[$uuid] = $item;
        }

        $model = $this->getResource()::getModel();

        if (Str::endsWith($targetStatePath, '.children')) {
            $parentPath = Str::beforeLast($targetStatePath, '.children');
            Assert::isArray($parent = data_get($this, $parentPath));

            foreach ($items as $item) {
                app($model)->find($item['id'])->update(['parent_id' => $parent['id']]);
            }
        }

        $ids = collect($items)->pluck('id')->toArray();

        $model::setNewOrder($ids);

        data_set($this, $targetStatePath, $items);
        Notification::make()
            ->title(trans('ui::filament-navigation.items.sorted'))
            ->success()
            ->send();
    }

    public function addChild(string $statePath): void
    {
        $this->mountedChildTarget = $statePath;

        $this->mountedItem = null;
        $this->mountedActionData = [];

        $this->mountAction('item');
    }

    public function removeItem(string $statePath): void
    {
        // $uuid = Str::afterLast($statePath, '.');

        // $parentPath = Str::beforeLast($statePath, '.');
        // $parent = data_get($this, $parentPath);

        // $item = Arr::except(data_get($this, $statePath), 'children');

        // $model = $this->getResource()::getModel();
        // $model::where('id', $item['id'])->delete();
        // data_set($this, $parentPath, Arr::except($parent, $uuid));
        $this->mountedItem = $statePath;
        $this->mountAction('delete');
    }

    public function deleteItem(?Model $record, array $data): void
    {
        $statePath = (string) $this->mountedItem;
        $uuid = Str::afterLast($statePath, '.');

        $parentPath = Str::beforeLast($statePath, '.');
        Assert::isArray($parent = data_get($this, $parentPath));
        Assert::isArray($item = data_get($this, $statePath));
        $item = Arr::except($item, 'children');

        $model = $this->getResource()::getModel();
        $model::where('id', $item['id'])->delete();
        data_set($this, $parentPath, Arr::except($parent, $uuid));
        $this->mountedItem = null;
    }

    public function editItem(string $statePath): void
    {
        $this->mountedItem = $statePath;
        Assert::isArray($item = data_get($this, $statePath));
        $this->mountedItemData = Arr::except($item, 'children');

        $this->mountAction('item');
    }

    public function createItem(): void
    {
        $this->mountedItem = null;
        $this->mountedItemData = [];
        $this->mountedActionData = [];
        $this->mountAction('item');
    }

    public function updateItem(Model $record, array $data): void
    {
        $keyName = $record->getKeyName();
        $id = $this->mountedItemData[$keyName];
        Assert::isInstanceOf($row = $record->find($id), Model::class);
        $up = tap($row)->update($data);
        Assert::isArray($item = data_get($this, $this->mountedItem));
        $up = array_merge($item, $up->toArray());
        if (null == $this->mountedItem) {
            return;
        }
        data_set($this, $this->mountedItem, $up);

        $this->mountedItem = null;
        $this->mountedItemData = [];
    }

    public function storeChildItem(Model $record, array $data): void
    {
        Assert::isArray($parent = data_get($this, $this->mountedChildTarget));
        Assert::string($data['parent_id'] = $parent['id']);

        $new_id = app(GetNewInventoryNumberAction::class)->execute($record::class, $data['parent_id']);
        $data['id'] = $new_id;
        $row = $record::class::create($data);
        $data = $row->toArray();
        $data['id'] = $new_id;

        Assert::isArray($children = data_get($this, $this->mountedChildTarget.'.children', []));

        $children[(string) Str::uuid()] = [
            ...$data,
            ...['children' => []],
        ];

        // dddx([
        //    'children' => $children,
        // ]);

        data_set($this, $this->mountedChildTarget.'.children', $children);

        $this->mountedChildTarget = null;
    }

    public function storeItem(?Model $record, array $data): void
    {
        $model = $this->getResource()::getModel();
        $data['parent_id'] = $record->getKey();
        Assert::string($parent_id = $data['parent_id']);
        $new_id = app(GetNewInventoryNumberAction::class)->execute($record::class, $parent_id);

        $new_id = app(GetNewInventoryNumberAction::class)->execute($record::class, $data['parent_id']);

        Assert::string($parent_id = $data['parent_id']);
        $new_id = app(GetNewInventoryNumberAction::class)->execute($record::class, $parent_id);

        $data['id'] = $new_id;

        $row = $model::create($data);
        // $k=$row->getKey();
        $v = $row->toArray();
        $v['id'] = $new_id;
        $v['children'] = [];
        $this->data['sons'][] = $v;
    }

    protected function getHeaderActions(): array
    {
        // dddx(get_class_methods($this->getResource()));
        // dddx($this->getFormSchema());
        // dddx(parent::getHeaderActions());
        $actions = [];
        if (method_exists($this, 'getMainHeaderActions')) {
            $actions = $this->getMainHeaderActions();
        }

        /**
         * @var array<\Filament\Forms\Components\Field>
         */
        $formSchema = $this->getResource()::form(Form::make($this))->getComponents();
        /**
         * @var array<\Filament\Forms\Components\Field>|\Closure|null
         */
        $formSchema = collect($formSchema)
            ->keyBy(static fn ($item) => $item->getName())
            ->except('sons')
            ->toArray();

        return [
            Action::make('delete')
                ->action(
                    function (array $data, $record): void {
                        if ($this->mountedItem) { // delete
                            $this->deleteItem($record, $data);

                            return;
                        }
                    }
                )
                ->requiresConfirmation()
            Action::make('item')
                ->mountUsing(
                    function (ComponentContainer $form): void {
                        if (! $this->mountedItem) {
                            return;
                        }

                        $form->fill($this->mountedItemData);
                    }
                )
                ->form($formSchema)
                ->modalWidth('xl')
                ->action(
                    function (array $data, $record): void {
                        if ($this->mountedItem) { // UPDATE
                            $this->updateItem($record, $data);

                            return;
                        }

                        if ($this->mountedChildTarget) { // ADD CHILD
                            $this->storeChildItem($record, $data);

                            return;
                        }

                        // CREATE

                        $this->storeItem($record, $data);
                    }
                )
                ->modalSubmitActionLabel(__('ui::filament-navigation.items-modal.btn'))
                ->label(__('ui::filament-navigation.items-modal.title')),
            ...$actions,
        ];
    }
}
