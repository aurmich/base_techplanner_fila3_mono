<?php

declare(strict_types=1);

namespace Modules\Job\Services;

use Illuminate\Console\Command;
use Illuminate\Foundation\Application;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\App;

use function Safe\preg_grep;

use Webmozart\Assert\Assert;

class CommandService
{
    public static function get(): Collection
    {
        // Access commands directly from the application instance
        // $commands = collect(app()->allCommands())->sortKeys();
        // $commandsKeys = $commands->keys()->toArray();
        // $commands = app()->allCommands();
        $commands = App::make('Illuminate\Console\Application')->all();
        $commandsKeys = array_keys($commands);

        // Show only supported commands based on the configuration
        if (config('job::commands.show_supported_only')) {
            Assert::isArray($commandsSupported = config('job::commands.supported'));

            foreach ($commandsSupported as $supported) {
                $commandsKeys = preg_grep("/^$supported/", $commandsKeys);
            }
        } else {
            Assert::isArray($commandsExclude = config('job::commands.exclude'));
            foreach ($commandsExclude as $exclude) {
                $commandsKeys = preg_grep("/^$exclude/", $commandsKeys, PREG_GREP_INVERT);
            }
        }

        return $commands->only($commandsKeys)
            ->map(fn (Command $command): array => [
                'name' => $command->getName(),
                'description' => $command->getDescription(),
                'signature' => $command->getSynopsis(),
                'full_name' => $command->getName().' ('.$command->getDescription().')',
                'arguments' => self::getArguments($command),
                'options' => self::getOptions($command),
            ]);
    }

    /**
     * Get the arguments of a command.
     */
    protected static function getArguments(Command $command): array
    {
        $arguments = [];
        foreach ($command->getArguments() as $argument) { // Updated method to get arguments
            $arguments[] = [
                'name' => $argument['name'], // Access argument name directly
                'default' => $argument['default'] ?? null, // Handle default values
                'required' => $argument['required'] ?? false, // Handle required flag
            ];
        }

        return $arguments;
    }

    /**
     * Get the options of a command.
     */
    protected static function getOptions(Command $command): array
    {
        $options = [
            'withValue' => [],
            'withoutValue' => [
                'verbose', 'quiet', 'ansi', 'no-ansi',
            ],
        ];

        foreach ($command->getOptions() as $option) { // Updated method to get options
            if ($option['accepts_value']) { // Check if the option accepts a value
                $options['withValue'][] = (object) [
                    'name' => $option['name'],
                    'default' => $option['default'] ?? null, // Handle default values
                    'required' => $option['value_required'] ?? false, // Handle required flag
                ];
            } else {
                $options['withoutValue'][] = $option['name'];
            }
        }

        return $options;
    }
}
